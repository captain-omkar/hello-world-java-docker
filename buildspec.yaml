version: 0.2

env:
  variables:
    GITHUB_TOKEN: "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"
    REPO: "kubernetes-blue-green-deployment-with-argo-rollout"
    REPO_URL: "https://github.com/captain-omkar/kubernetes-blue-green-deployment-with-argo-rollout.git"
    USER_NAME: "captain-omkar"


phases:
  install:
    runtime-versions:
      git: 2.33.1
    commands:
      - git config --global credential.helper '!aws codecommit credential-helper $@'
      - git config --global credential.UseHttpPath true
      - git clone $REPO_URL
      - cd $REPO
      - pwd
#       - git config --unset-all credential.helper
#       - git config --global --unset-all credential.helper
#       - git config --system --unset-all credential.helper
      - git config --global user.email "omkarchavanbldea@gmail.com"
      - git config --global user.name "captain-omkar"
      
      - echo "Hello, world!" > hello.txt
      - git remote set-url origin https://$USER_NAME:$GITHUB_TOKEN@github.com/captain-omkar/kubernetes-blue-green-deployment-with-argo-rollout.git
      - git remote -v 
      - git add .
      - git commit -m "added"
      - git push 
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.3.0.1492-linux.zip
      - unzip sonar-scanner-cli-3.3.0.1492-linux.zip
      - export PATH=$PATH:./sonar-scanner-3.3.0.1492-linux/bin/
 
  pre_build:
    commands:
      - mvn clean install
      - echo Logging in to Amazon ECR...
      - aws --version
      - sonar-scanner -X -Dsonar.projectKey=myproj -Dsonar.java.binaries=target/classes -Dsonar.sources=src -Dsonar.host.url=http://52.91.2.145:80 -Dsonar.login=24685e8524aded3a927eb1e72448aff666660a75
      - aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 086349442762.dkr.ecr.us-east-1.amazonaws.com
      - REPOSITORY_URI=086349442762.dkr.ecr.us-east-1.amazonaws.com/loco
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"order-service","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json
artifacts:
  files:
   - imagedefinitions.json
   - target/*.jar
